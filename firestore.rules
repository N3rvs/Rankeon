rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- METADATA ---
    match /_metadata/{docId} {
      allow read; // Allow reading app metadata
      // Only allow the 'grantFirstAdminRole' function to write here
      allow write: if request.auth != null && request.auth.token.role == null; 
    }

    // --- USERS ---
    match /users/{userId} {
      // Anyone can get a user's public profile
      allow get: if true;
      
      // Only admins can list all users for the management table
      allow list: if request.auth != null && request.auth.token.role == 'admin';
      
      // Only the user themselves can update their profile
      allow update: if request.auth != null && request.auth.uid == userId;

      // Creation/deletion is handled by secure backend functions
      allow create: if false; 
      allow delete: if request.auth != null && request.auth.token.role == 'admin';
    }

    // --- FRIEND REQUESTS & NOTIFICATIONS ---
    match /friendRequests/{requestId} {
      // Allow read/write if you are the sender or receiver
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      // Allow create if you are the sender
      allow create: if request.auth != null && request.auth.uid == request.resource.data.from;
    }
    
    match /inbox/{userId}/{document=**} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- CHATS & MESSAGES ---
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.members;
      
      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // Only the sender can create a message
        allow create: if request.auth != null && request.auth.uid == request.resource.data.sender;
        // Only the sender can delete their message
        allow delete: if request.auth != null && request.auth.uid == resource.data.sender;
        allow update: if false; // Messages are immutable
      }
    }
    
    // --- TEAMS ---
    match /teams/{teamId} {
      // Anyone can view a team's public profile
      allow read;
      
      // Only the founder or an admin can update team details
      allow update: if request.auth != null && (request.auth.uid == resource.data.founder || request.auth.token.role == 'admin');
      
      // Only the founder or an admin can delete a team
      allow delete: if request.auth != null && (request.auth.uid == resource.data.founder || request.auth.token.role == 'admin');

      allow create: if request.auth != null; // Checked in backend function
      
      match /members/{memberId} {
        allow read;
        // Only the team founder/coach or an admin can manage members
        allow write, delete: if request.auth != null && (
          get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid ||
          (get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role == 'coach') ||
          request.auth.token.role == 'admin'
        );
      }
    }

    // --- GAME ROOMS & CHAT ---
    match /gameRooms/{roomId} {
        allow read, create; // Anyone can see rooms, create is handled by backend
        allow update: if request.auth != null && request.auth.uid in resource.data.participants;
        
        match /messages/{messageId} {
            allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/gameRooms/$(roomId)).data.participants;
            allow update, delete: if false;
        }
    }
    
    // --- TOURNAMENT PROPOSALS (Admin/Mod/Certified only) ---
    match /tournamentProposals/{proposalId} {
        // Admins can read/write all proposals
        allow read, write: if request.auth.token.role == 'admin';
        // Creators can create proposals
        allow create: if request.auth.token.isCertifiedStreamer == true || request.auth.token.role == 'moderator';
    }
  }
}
