rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read any profile, but only write/update their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    // Teams can be read by any authenticated user.
    match /teams/{teamId} {
      allow read: if request.auth != null;
      // Writes are handled by secure server actions, deny on client.
      allow write: if false;
    }

    // Chats and messages are read-only on client. Writes are via functions.
    match /chats/{chatId} {
      // allow update for lastMessage field when sending a message
      allow read, update: if request.auth.uid in resource.data.members;
      // Chat creation is handled by the sendMessageToFriend function
      allow create: if false;

      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        // Writing/deleting messages is handled by secure backend functions.
        allow write: if false;
      }
    }

    // Friend requests are read-only on the client, for the two people involved.
    // This allows the friendship button to check for pending requests.
    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.from || request.auth.uid == resource.data.to;
      // Writing to friend requests is handled by secure backend functions.
      allow write: if false;
    }

    // Inbox notifications are private. A user can only access their own.
    match /inbox/{userId}/{document=**} {
      // Allow writing to update the 'read' status of a notification.
      allow read, write: if request.auth.uid == userId;
    }

    // Game rooms are created by a backend function and are read-only on the client.
    match /gameRooms/{roomId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
  }
}
