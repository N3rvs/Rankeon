rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is an admin or moderator through their custom claims
    function isModOrAdmin() {
      return isAuthenticated() && (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }

    // USERS
    // Publicly readable profiles, but only the user can update their own data.
    // Sensitive fields like 'role' are protected and only updatable via Cloud Functions.
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated();
      
      // Users can only update specific, non-critical fields on their own profile.
      allow update: if isAuthenticated() && request.auth.uid == userId
                    && request.resource.data.keys().hasOnly(['name', 'bio', 'country', 'primaryGame', 'rank', 'lookingForTeam', 'skills', 'avatarUrl', '_claimsRefreshedAt', 'status']);
    }

    // TEAMS
    // Publicly readable, but all modifications are handled by secure Cloud Functions.
    match /teams/{teamId} {
      allow read: if true;
      allow write: if false; // All writes are through backend functions
      
      match /members/{memberId} {
        allow read: if true;
        allow write: if true;
      }
      
      // Team tasks subcollection
      match /tasks/{taskId} {
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds.hasAny([request.auth.uid]);
        allow write: if isAuthenticated() && get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid;
      }
    }

    // TEAM INVITATIONS & APPLICATIONS
    // Logic is handled by secure Cloud Functions. Client needs read access to their own invites/apps.
    match /teamInvitations/{inviteId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.toUserId || request.auth.uid == get(/databases/$(database)/documents/teams/$(resource.data.fromTeamId)).data.founder);
        allow write: if false;
    }
    match /teamApplications/{appId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.applicantId || request.auth.uid == get(/databases/$(database)/documents/teams/$(resource.data.teamId)).data.founder);
        allow write: if false;
    }

    // CHATS & MESSAGES
    // Only members of a chat can read its data or messages.
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow write: if false; // All writes are through backend functions

      match /messages/{messageId} {
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // Creating a message is handled by a backend function to ensure notifications are sent, etc.
        allow create: if false; 
        allow update, delete: if false; // Messages are immutable from the client
      }
    }
    
    // FRIEND REQUESTS
    // Only involved users can read a request. All mutations are handled by secure Cloud Functions.
    match /friendRequests/{requestId} {
       allow read: if isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
       allow write: if false;
    }

    // INBOX & NOTIFICATIONS
    // Users can only access their own inbox.
    match /inbox/{userId}/{document=**} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // HONORS GIVEN
    // To check if a user has already honored another. Write is handled by a function.
    match /honorsGiven/{honorId} {
        allow read: if isAuthenticated();
        allow write: if false;
    }
    
    // SCRIMS
    // Publicly readable, all modifications handled by secure Cloud Functions.
    match /scrims/{scrimId} {
        allow read: if true;
        allow write: if false;
    }
    
    // TOURNAMENTS
    // Publicly readable, modifications handled by secure Cloud Functions.
    match /tournaments/{tournamentId} {
        allow read: if true;
        allow write: if false;
    }

    // TOURNAMENT PROPOSALS
    // Readable only by moderators and admins. Creation/updates handled by functions.
    match /tournamentProposals/{proposalId} {
        allow read: if isModOrAdmin();
        allow write: if false;
    }

    // SUPPORT TICKETS
    // Readable by the user who created it, or by staff. Conversation writes handled by functions.
    match /supportTickets/{ticketId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isModOrAdmin());
        allow create: if isAuthenticated();
        allow update: if isModOrAdmin(); // Only mods/admins can update status
        
        match /conversation/{messageId} {
            allow read: if isAuthenticated() && (request.auth.uid == get(/databases/$(database)/documents/supportTickets/$(ticketId)).data.userId || isModOrAdmin());
            allow create: if false; // Handled by function
        }
    }
    
    // GAME ROOMS
    match /gameRooms/{roomId} {
        allow read: if true;
        allow write: if isAuthenticated();
        
        match /messages/{messageId} {
          allow read, write: if isAuthenticated();
        }
    }
  }
}
