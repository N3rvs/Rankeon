rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    function isModerator() {
      return request.auth.token.role == 'moderator';
    }
    function isPrivileged() {
      return isAdmin() || isModerator();
    }
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    function isNotBlockedBy(userId) {
      let otherUserBlockedList = getUserData(userId).blocked;
      // Check if the list exists and if our UID is in it.
      return otherUserBlockedList == null || !(request.auth.uid in otherUserBlockedList);
    }

    // USERS collection
    match /users/{userId} {
      // Anyone can read a user profile IF they are signed in and not blocked by that user.
      allow read: if isSignedIn() && isNotBlockedBy(userId);
      // A user can create their own profile
      allow create: if isOwner(userId);
      // A user can update their own profile, or an admin can
      allow update: if isOwner(userId) || isAdmin();
    }
    
    // METADATA (for one-time setup functions)
    match /_metadata/{docId} {
      allow read, write: if isSignedIn();
    }

    // TEAMS collection
    match /teams/{teamId} {
      // Any signed-in user can view a team
      allow read: if isSignedIn();
      // Any signed-in user can create a team (the function will apply extra logic)
      allow create: if isSignedIn();
      // Only the founder or an admin can update a team.
      allow update: if isSignedIn() && (resource.data.founder == request.auth.uid || isAdmin());
      // Only the founder or an admin can delete a team.
      allow delete: if isSignedIn() && (get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isAdmin());

      match /members/{memberId} {
        allow read, write: if isSignedIn() && (get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isAdmin());
      }
    }
    
    // FRIEND REQUESTS collection
    match /friendRequests/{requestId} {
        // You can read a request if you sent it or received it.
        allow read: if isSignedIn() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
        // You can create a request to another user.
        allow create: if isSignedIn() && request.resource.data.from == request.auth.uid;
        // You can update (accept/reject) a request sent to you, or delete a request you sent.
        allow update, delete: if isSignedIn() && (resource.data.to == request.auth.uid || resource.data.from == request.auth.uid);
    }
    
    // INBOX (notifications) collection
    match /inbox/{userId}/{document=**} {
      // You can only access your own inbox.
      allow read, write, delete: if isOwner(userId);
    }

    // CHATS collection
    match /chats/{chatId} {
        // You can read/write to a chat if you are a member
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.members;
        
        // Messages subcollection
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
            // You can only delete your own messages
            allow delete: if isSignedIn() && resource.data.sender == request.auth.uid;
        }
    }

    // GAME ROOMS collection
    match /gameRooms/{roomId} {
        allow read, create: if isSignedIn();
        // You can only update a room if you are a participant (join/leave).
        // The creator is a participant by default.
        allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
        // Only the creator or an admin can delete a room.
        allow delete: if isSignedIn() && (resource.data.createdBy == request.auth.uid || isAdmin());

        match /messages/{messageId} {
            // Only participants can read/write messages
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/gameRooms/$(roomId)).data.participants;
        }
    }

    // TOURNAMENT PROPOSALS collection
    match /tournamentProposals/{proposalId} {
        // Only privileged users can create proposals
        allow create: if isSignedIn() && isPrivileged();
        // Admins/Mods can read/update/delete any proposal.
        allow read, update, delete: if isSignedIn() && isPrivileged();
    }
  }
}
