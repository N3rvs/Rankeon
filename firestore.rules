rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for common checks
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }

    function isModeratorOrAdmin() {
        return isAuthenticated() && (request.auth.token.role == 'admin' || request.auth.token.role == 'moderator');
    }

    // USERS
    // Users can read public profiles but only update their own.
    // Admins have full access.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId) || isAdmin();
      allow create, delete: if false; // Handled by backend functions
    }
    
    // TEAMS
    // Teams are publicly readable. Only the founder can modify or delete.
    match /teams/{teamId} {
      allow read: if isAuthenticated();

      function isFounder() {
        return isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/teams/$(teamId)).data.founder;
      }
      
      allow update, delete: if isFounder() || isAdmin();
      allow create: if false; // Handled by backend function

      // Members subcollection is managed by the backend
      match /members/{memberId} {
        allow read: if isAuthenticated();
        allow write: if false; 
      }
    }

    // CHATS
    // Only members of a chat can access it or its messages.
    match /chats/{chatId} {
      function isMember() {
        return isAuthenticated() && request.auth.uid in resource.data.members;
      }
      
      allow get, list: if isMember();
      allow update: if isMember(); // For updating lastMessage, etc.
      allow create, delete: if false; // Handled by backend functions
      
      match /messages/{messageId} {
        allow read: if isMember();
        allow create: if isMember() && isOwner(request.resource.data.sender);
        allow delete: if isOwner(get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.sender);
      }
    }

    // GAME ROOMS
    // Game rooms are public, but messages are for participants only.
    match /gameRooms/{roomId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated(); // Participant list updates
      allow delete: if false; 

       match /messages/{messageId} {
        function isParticipant() {
            return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/gameRooms/$(roomId)).data.participants;
        }
        allow read: if isParticipant();
        allow create: if isParticipant() && isOwner(request.resource.data.sender);
        allow delete: if false; // Room chat messages are not deletable
      }
    }

    // FRIEND REQUESTS
    // Only involved parties can see a friend request.
    match /friendRequests/{requestId} {
      function isInvolved() {
        return isAuthenticated() && (request.auth.uid == resource.data.from || request.auth.uid == resource.data.to);
      }
      allow read: if isInvolved();
      allow create, update, delete: if false; // Handled by backend functions
    }
    
    // NOTIFICATIONS (INBOX)
    // Users can only access their own inbox.
    match /inbox/{userId}/{document=**} {
      allow read, write, delete: if isOwner(userId);
    }

    // TOURNAMENT PROPOSALS
    // Only admins and moderators can manage proposals.
    match /tournamentProposals/{proposalId} {
        allow read, write, delete: if isModeratorOrAdmin();
    }
  }
}
