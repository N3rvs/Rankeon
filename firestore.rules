rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's profile data
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return isAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }

    match /users/{userId} {
      // Admins can list all users. Users can only get their own profile.
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      
      // Users can create their own profile.
      allow create: if request.auth.uid == userId;

      // Users can update their own profile, and admins can update any profile.
      allow update: if request.auth.uid == userId || isAdmin();
    }

    match /teams/{teamId} {
      allow read, create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid || isAdmin();
    }

    // Conversations can only be read or written by participants.
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      // Messages can only be read or written by conversation participants.
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds.hasAny([request.auth.uid]);
      }
    }
  }
}
