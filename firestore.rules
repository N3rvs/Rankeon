rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A user can read any profile, but can only write to their own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      // Only the user themselves can update their profile.
      allow write: if isOwner(userId);
    }

    // Rules for conversations and messages
    match /conversations/{conversationId} {
      // Participants can read and write to conversations they are part of.
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;

      // Rules for the messages subcollection
      match /messages/{messageId} {
        // Participants of the parent conversation can read messages.
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
        // A user can only create a message if they are a participant and the senderId matches their own uid.
        allow create: if isAuthenticated() 
                      && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds
                      && request.resource.data.senderId == request.auth.uid;
      }
    }

    // Teams collection rules
    match /teams/{teamId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }
  }
}
