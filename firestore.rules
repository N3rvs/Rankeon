rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks the user's role from their user document.
    function getRole() {
      // Use exists() to prevent errors if the user document is not yet created.
      return get(path("/databases/" + database + "/documents/users/" + request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getRole() == 'admin';
    }

    function isModerator() {
      return isAuthenticated() && getRole() == 'moderator';
    }

    function isPrivilegedUser() {
      return isAdmin() || isModerator();
    }
    
    // --- Collection: users ---
    match /users/{userId} {
      // Any authenticated user can read any profile (for market, friends list, etc.).
      allow read: if isAuthenticated();
      
      // A user can create their own document during sign-up.
      allow create: if isOwner(userId);
      
      // A user can update their own document, or an admin can update any document.
      allow update: if isOwner(userId) || isAdmin();
      
      // Only admins can delete user accounts from Firestore.
      allow delete: if isAdmin();
    }

    // --- Collection: teams ---
    match /teams/{teamId} {
      // Any authenticated user can read team details (for market, public profiles).
      allow read: if isAuthenticated();
      
      // Write operations are primarily handled by secure Cloud Functions.
      // These rules provide an extra layer of security.
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && (get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isAdmin());
    }
    
    // Subcollection: Team members
    match /teams/{teamId}/members/{memberId} {
      allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/teams/$(teamId)).data.memberIds;
      allow write: if isAuthenticated() && (get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isAdmin());
    }

    // --- Collection: friendRequests ---
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.from == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.to == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
    }
    
    // --- Collection: chats ---
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.members;
    }
    
    // Subcollection: Chat messages
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
    }
    
    // --- Collection: inbox (notifications) ---
    match /inbox/{userId}/{subcollection}/{notificationId} {
      // You can only access your own inbox subcollections and notifications.
      allow read, write, delete, list: if isOwner(userId);
    }
    
    // --- Collection: gameRooms ---
    match /gameRooms/{roomId} {
        allow read, create, update: if isAuthenticated();
        allow delete: if isAuthenticated() && (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Subcollection: Game room messages
    match /gameRooms/{roomId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/gameRooms/$(roomId)).data.participants;
    }

    // --- Collection: tournamentProposals ---
    match /tournamentProposals/{proposalId} {
      allow read: if isPrivilegedUser();
      allow create: if isAuthenticated() && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isCertifiedStreamer == true || isPrivilegedUser());
      allow update, delete: if isAdmin();
    }
  }
}
