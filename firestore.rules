rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // Anyone authenticated can view user profiles.
      allow read: if request.auth != null;
      // A user can only create or update their own profile.
      allow write: if request.auth.uid == userId;
    }

    match /teams/{teamId} {
      // Anyone can view team profiles.
      allow read: if request.auth != null;
      // Team management rules would go here (e.g., only owner can update).
    }
    
    match /inbox/{userId}/{documents=**} {
      // A user can only access their own inbox and its subcollections.
      allow read, write: if request.auth.uid == userId;
    }
    
    match /friends/{userId}/{documents=**} {
      // A user can only manage their own friends list.
      allow read, write: if request.auth.uid == userId;
    }
    
    match /friendRequests/{requestId} {
      // A user can read a request if they are part of it.
      allow read: if request.auth.uid in resource.data.participantIds;
      // A user can create a request if they are the sender.
      allow create: if request.auth.uid == request.resource.data.from;
      // A user can update (accept/reject) a request if they are the recipient.
      allow update: if request.auth.uid == resource.data.to;
      // Either user can delete the request (e.g. sender cancels, receiver rejects and cleans up)
      allow delete: if request.auth.uid in resource.data.participantIds;
    }

    match /chats/{chatId} {
      // A user can access a chat document if they are a member.
      allow read, update: if request.auth.uid in resource.data.members;
      // Chat creation is handled by the cloud function 'sendMessageToFriend'
      allow create: if request.auth.uid in request.resource.data.members;

      match /messages/{messageId} {
        // A user can read messages in a chat they belong to.
        allow read: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // A user can create a message if they are the sender and a member.
        allow create: if request.auth.uid == request.resource.data.sender &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // A user can only delete their own messages.
        allow delete: if resource.data.sender == request.auth.uid;
      }
    }
  }
}
