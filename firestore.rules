
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role from their token
    function isRole(role) {
      return request.auth.token.role == role;
    }

    // Helper function to check if the user is an admin or moderator
    function isPrivileged() {
      return isRole('admin') || isRole('moderator');
    }
    
    // Helper function to check if user is self
    function isSelf(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      // Anyone logged in can see a user's profile.
      allow read: if request.auth != null;
      
      // A user can update their own profile. An admin can update any profile.
      // We protect the 'role' and 'isCertifiedStreamer' fields from self-editing.
      allow update: if (isSelf(userId) && !('role' in request.resource.data) && !('isCertifiedStreamer' in request.resource.data)) || isRole('admin');
      
      // Only an admin can create or delete user documents directly (rarely needed)
      allow create, delete: if isRole('admin');
    }

    // TEAMS
    match /teams/{teamId} {
      // Anyone logged in can view a team's public profile
      allow read: if request.auth != null;
      
      // Only the founder or an admin can update the team
      allow update: if get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isRole('admin');
      
      // Only the founder or an admin can delete the team
      allow delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isRole('admin');
      
      // Team creation is handled by a Cloud Function, not direct client write
      allow create: if false; 
      
      // Team Members subcollection
      match /members/{memberId} {
        allow read: if request.auth != null;
        // Only the team founder or an admin can manage members
        allow write, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.founder == request.auth.uid || isRole('admin');
      }
    }
    
    // CHATS
    match /chats/{chatId} {
      // Members of the chat can read/write the chat document (e.g., lastMessage)
      allow read, write: if request.auth.uid in resource.data.members;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Members of the chat can read messages
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        // A user can only create a message if they are a member of the chat and the sender
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]) && request.resource.data.sender == request.auth.uid;
        // A user can only delete their own messages
        allow delete: if resource.data.sender == request.auth.uid;
      }
    }
    
    // INBOX / NOTIFICATIONS
    match /inbox/{userId}/{document=**} {
      // A user can only access their own inbox
      allow read, write, delete: if isSelf(userId);
    }
    
    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      // You can only interact with requests where you are the sender or receiver
      allow read, update, delete: if request.auth.uid == resource.data.from || request.auth.uid == resource.data.to;
      // You can only create a request where you are the sender
      allow create: if request.auth.uid == request.resource.data.from;
    }
    
    // GAME ROOMS
    match /gameRooms/{roomId} {
        allow read: if request.auth != null;
        // Creating is handled by a function
        allow create: if false; 
        // Only participants or creator can update (e.g. for joining/leaving)
        allow update: if request.auth.uid in resource.data.participants || request.auth.uid == resource.data.createdBy;
        // Only creator can delete
        allow delete: if request.auth.uid == resource.data.createdBy;

        match /messages/{messageId} {
            // Only participants can read/write chat messages in a room
            allow read, create: if get(/databases/$(database)/documents/gameRooms/$(roomId)).data.participants.hasAny([request.auth.uid]);
            allow delete: if false;
        }
    }

    // TOURNAMENT PROPOSALS
    match /tournamentProposals/{proposalId} {
        // Creating is handled by a function
        allow create: if false;
        // Anyone can read proposals
        allow read: if request.auth != null;
        // Only admins/moderators can update/delete proposals (e.g., to approve/reject)
        allow update, delete: if isPrivileged();
    }

    // METADATA for first admin creation
    match /_metadata/app_config {
      // Anyone can read this config document
      allow read: if true;
      // It can only be written to ONCE, during the transaction in the Cloud Function
      allow write: if !exists(/databases/$(database)/documents/_metadata/app_config);
    }
  }
}
